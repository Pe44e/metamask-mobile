name: Performance E2E Test Manual WorkFlow
on:
  workflow_dispatch:
    inputs:
      info:
        description: 'This workflow runs performance tests on multiple devices for both iOS and Android platforms'
        required: false
        type: string
      browserstack_app_url_android:
        description: 'BrowserStack Android App URL (bs://...)'
        required: false
        type: string
      browserstack_app_url_ios:
        description: 'BrowserStack iOS App URL (bs://...)'
        required: false
        type: string
      test_suite:
        description: 'Test suite to run (e.g., **/tests/*.spec.js for all tests)'
        required: false
        default: '**/tests/performance/*.spec.js'
        type: string
permissions:
  contents: read
  id-token: write
env:
  BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
  BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
  MM_TEST_ACCOUNT_SRP: ${{ secrets.MM_TEST_ACCOUNT_SRP }}
  TEST_SRP_1: ${{ secrets.TEST_SRP_1 }}
  TEST_SRP_2: ${{ secrets.TEST_SRP_2 }}
  TEST_SRP_3: ${{ secrets.TEST_SRP_3 }}

jobs:
  # Combined job to trigger QA builds, download artifacts, and upload to BrowserStack
  trigger-qa-builds-and-upload:
    name: Trigger QA Builds and Upload to BrowserStack
    runs-on: ubuntu-latest
    env:
      BITRISE_APP_ID: ${{ secrets.BITRISE_APP_ID }}
      BITRISE_BUILD_TRIGGER_TOKEN: ${{ secrets.BITRISE_BUILD_TRIGGER_TOKEN }}
      BITRISE_API_TOKEN: ${{ secrets.BITRISE_API_TOKEN }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn setup
      
      - name: Trigger Bitrise QA Builds
        env:
          BITRISE_APP_ID: ${{ env.BITRISE_APP_ID }}
          BITRISE_BUILD_TRIGGER_TOKEN: ${{ env.BITRISE_BUILD_TRIGGER_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Triggering Bitrise QA builds..."
          echo "BITRISE_APP_ID: $BITRISE_APP_ID"
          echo "Current branch: ${{ github.ref_name }}"
          
          # Trigger QA builds pipeline (handles both Android and iOS)
          BUILD_RESPONSE=$(curl -s -X POST \
            "https://app.bitrise.io/app/$BITRISE_APP_ID/build/start.json" \
            -H "Content-Type: application/json" \
            -d '{
              "build_params": {
                "branch": "main",
                "pipeline_id": "create_qa_builds_pipeline",
                "commit_message": "Triggered by Performance E2E workflow"
              },
              "hook_info": {
                "type": "bitrise",
                "build_trigger_token": "'$BITRISE_BUILD_TRIGGER_TOKEN'"
              },
              "triggered_by": "GitHub Actions Performance E2E"
            }')
          
          echo "Build response: $BUILD_RESPONSE"
          BUILD_SLUG=$(echo "$BUILD_RESPONSE" | jq -r '.build_slug')
          echo "Build slug: $BUILD_SLUG"
          
          if [[ -z "$BUILD_SLUG" || "$BUILD_SLUG" == "null" ]]; then
            echo "Error: Failed to get build slug"
            echo "Full response: $BUILD_RESPONSE"
            exit 1
          fi
          
          # Store build slug for artifact download
          echo "BUILD_SLUG=$BUILD_SLUG" >> $GITHUB_ENV
          
          # Wait for build to complete (with timeout)
          echo "Waiting for build to complete..."
          TIMEOUT=1200  # 20 minutes
          ELAPSED=0
          
          while [ $ELAPSED -lt $TIMEOUT ]; do
            # Check build status using the correct v0.1 API endpoint
            echo "Checking build status for slug: $BUILD_SLUG"
            STATUS_RESPONSE=$(curl -s -H "Authorization: $BITRISE_API_TOKEN" \
              "https://api.bitrise.io/v0.1/apps/$BITRISE_APP_ID/builds/$BUILD_SLUG")
            echo "Status response: $STATUS_RESPONSE"
            
            BUILD_STATUS=$(echo "$STATUS_RESPONSE" | jq -r '.data.status')
            echo "Build status: $BUILD_STATUS"
            
            if [ "$BUILD_STATUS" = "1" ]; then
              echo "Build completed successfully!"
              break
            elif [ "$BUILD_STATUS" = "2" ]; then
              echo "Build failed!"
              exit 1
            elif [ "$BUILD_STATUS" = "0" ]; then
              echo "Build is in progress..."
            elif [ "$BUILD_STATUS" = "null" ]; then
              echo "Build status is null, checking if build exists..."
              # Try to get build info to see if it exists
              BUILD_INFO=$(curl -s -H "Authorization: $BITRISE_API_TOKEN" \
                "https://api.bitrise.io/v0.1/apps/$BITRISE_APP_ID/builds/$BUILD_SLUG")
              echo "Build info response: $BUILD_INFO"
            fi
            
            sleep 30
            ELAPSED=$((ELAPSED + 30))
          done
          
          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "Timeout waiting for build to complete"
            echo "Final build status: $BUILD_STATUS"
            echo "Build slug: $BUILD_SLUG"
            exit 1
          fi
      
      - name: Download Build Artifacts
        id: download-artifacts
        env:
          BITRISE_APP_ID: ${{ env.BITRISE_APP_ID }}
          BITRISE_API_TOKEN: ${{ env.BITRISE_API_TOKEN }}
        run: |
          echo "Downloading build artifacts..."
          
          # Download Android APK
          ANDROID_ARTIFACTS=$(curl -s -H "Authorization: $BITRISE_API_TOKEN" \
            "https://api.bitrise.io/v0.1/apps/$BITRISE_APP_ID/builds/$BUILD_SLUG/artifacts")
          echo "Android artifacts response: $ANDROID_ARTIFACTS"
          
          ANDROID_APK_ARTIFACT=$(echo "$ANDROID_ARTIFACTS" | jq -r '.data[] | 
            select(.artifact_type == "android-apk" and (.title | startswith("metamask-qa-prod")))')
          
          if [[ -n "$ANDROID_APK_ARTIFACT" ]]; then
            ANDROID_ARTIFACT_SLUG=$(echo "$ANDROID_APK_ARTIFACT" | jq -r '.slug')
            ANDROID_DETAILS=$(curl -s -H "Authorization: $BITRISE_API_TOKEN" \
              "https://api.bitrise.io/v0.1/apps/$BITRISE_APP_ID/builds/$BUILD_SLUG/artifacts/$ANDROID_ARTIFACT_SLUG")
            
            ANDROID_VERSION=$(echo "$ANDROID_DETAILS" | jq -r '.data.artifact_meta.app_info.version')
            ANDROID_DOWNLOAD_URL=$(echo "$ANDROID_DETAILS" | jq -r '.data.expiring_download_url')
            
            echo "Android version: $ANDROID_VERSION"
            echo "android-version=$ANDROID_VERSION" >> $GITHUB_OUTPUT
            
            if [[ -n "$ANDROID_DOWNLOAD_URL" && "$ANDROID_DOWNLOAD_URL" != "null" ]]; then
              ANDROID_FILENAME="MetaMask-Android-${ANDROID_VERSION}.apk"
              wget -O "$ANDROID_FILENAME" "$ANDROID_DOWNLOAD_URL"
              echo "android-app-path=$PWD/$ANDROID_FILENAME" >> $GITHUB_OUTPUT
              echo "Downloaded Android APK: $ANDROID_FILENAME"
            fi
          fi
          
          # Download iOS IPA
          IOS_ARTIFACTS=$(curl -s -H "Authorization: $BITRISE_API_TOKEN" \
            "https://api.bitrise.io/v0.1/apps/$BITRISE_APP_ID/builds/$BUILD_SLUG/artifacts")
          echo "iOS artifacts response: $IOS_ARTIFACTS"
          
          IOS_IPA_ARTIFACT=$(echo "$IOS_ARTIFACTS" | jq -r '.data[] | 
            select(.artifact_type == "ios-ipa" and (.title | startswith("metamask-device-qa-prod")))')
          
          if [[ -n "$IOS_IPA_ARTIFACT" ]]; then
            IOS_ARTIFACT_SLUG=$(echo "$IOS_IPA_ARTIFACT" | jq -r '.slug')
            IOS_DETAILS=$(curl -s -H "Authorization: $BITRISE_API_TOKEN" \
              "https://api.bitrise.io/v0.1/apps/$BITRISE_APP_ID/builds/$BUILD_SLUG/artifacts/$IOS_ARTIFACT_SLUG")
            
            IOS_VERSION=$(echo "$IOS_DETAILS" | jq -r '.data.artifact_meta.app_info.version')
            IOS_DOWNLOAD_URL=$(echo "$IOS_DETAILS" | jq -r '.data.expiring_download_url')
            
            echo "iOS version: $IOS_VERSION"
            echo "ios-version=$IOS_VERSION" >> $GITHUB_OUTPUT
            
            if [[ -n "$IOS_DOWNLOAD_URL" && "$IOS_DOWNLOAD_URL" != "null" ]]; then
              IOS_FILENAME="MetaMask-iOS-${IOS_VERSION}.ipa"
              wget -O "$IOS_FILENAME" "$IOS_DOWNLOAD_URL"
              echo "ios-app-path=$PWD/$IOS_FILENAME" >> $GITHUB_OUTPUT
              echo "Downloaded iOS IPA: $IOS_FILENAME"
            fi
          fi
      
      - name: Upload Apps to BrowserStack
        id: upload-to-browserstack
        env:
          BROWSERSTACK_USERNAME: ${{ env.BROWSERSTACK_USERNAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ env.BROWSERSTACK_ACCESS_KEY }}
        run: |
          echo "Uploading apps to BrowserStack..."
          
          # Use the downloaded APK and IPA files directly
          APK_FILE="${{ steps.download-artifacts.outputs.android-app-path }}"
          IPA_FILE="${{ steps.download-artifacts.outputs.ios-app-path }}"
          
          if [[ -z "$APK_FILE" ]]; then
            echo "Error: No APK file path found"
            exit 1
          fi
          
          if [[ -z "$IPA_FILE" ]]; then
            echo "Error: No IPA file path found"
            exit 1
          fi
          
          echo "Using APK: $APK_FILE"
          echo "Using IPA: $IPA_FILE"
          
          # Generate custom IDs for the uploads
          ANDROID_CUSTOM_ID="metamask-android-qa-$(date +%s)"
          IOS_CUSTOM_ID="metamask-ios-qa-$(date +%s)"
          
          echo "Android Custom ID: $ANDROID_CUSTOM_ID"
          echo "iOS Custom ID: $IOS_CUSTOM_ID"
          
          # Upload Android APK to BrowserStack
          echo "Uploading Android APK to BrowserStack..."
          ANDROID_RESPONSE=$(curl -u "$BROWSERSTACK_USERNAME:$BROWSERSTACK_ACCESS_KEY" \
            -X POST "https://api-cloud.browserstack.com/app-automate/upload" \
            -F "file=@$APK_FILE" \
            -F 'data={"custom_id": "'$ANDROID_CUSTOM_ID'"}' \
            -s)
          
          ANDROID_APP_URL=$(echo "$ANDROID_RESPONSE" | jq -r '.app_url')
          if [[ -n "$ANDROID_APP_URL" && "$ANDROID_APP_URL" != "null" ]]; then
            echo "Android app uploaded successfully: $ANDROID_APP_URL"
            echo "browserstack-android-url=$ANDROID_APP_URL" >> $GITHUB_OUTPUT
          else
            echo "Error: Failed to upload Android app"
            echo "Response: $ANDROID_RESPONSE"
            exit 1
          fi
          
          # Upload iOS IPA to BrowserStack
          echo "Uploading iOS IPA to BrowserStack..."
          IOS_RESPONSE=$(curl -u "$BROWSERSTACK_USERNAME:$BROWSERSTACK_ACCESS_KEY" \
            -X POST "https://api-cloud.browserstack.com/app-automate/upload" \
            -F "file=@$IPA_FILE" \
            -F 'data={"custom_id": "'$IOS_CUSTOM_ID'"}' \
            -s)
          
          IOS_APP_URL=$(echo "$IOS_RESPONSE" | jq -r '.app_url')
          if [[ -n "$IOS_APP_URL" && "$IOS_APP_URL" != "null" ]]; then
            echo "iOS app uploaded successfully: $IOS_APP_URL"
            echo "ios-app-url=$IOS_APP_URL" >> $GITHUB_OUTPUT
          else
            echo "Error: Failed to upload iOS app"
            echo "Response: $IOS_RESPONSE"
            exit 1
          fi
          
          echo "=== BrowserStack Upload Summary ==="
          echo "Android App URL: $ANDROID_APP_URL"
          echo "iOS App URL: $IOS_APP_URL"
      
      - name: Upload Apps as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qa-apps
          path: |
            *.apk
            *.ipa
          retention-days: 1
    
    outputs:
      android-version: ${{ steps.download-artifacts.outputs.android-version }}
      ios-version: ${{ steps.download-artifacts.outputs.ios-version }}
      browserstack-android-url: ${{ steps.upload-to-browserstack.outputs.browserstack-android-url }}
      browserstack-ios-url: ${{ steps.upload-to-browserstack.outputs.browserstack-ios-url }}

  # Sequential Android Tests on Multiple Devices
  android-tests:
    name: Android Tests
    runs-on: ubuntu-latest
    needs: trigger-qa-builds-and-upload
    strategy:
      fail-fast: false
      matrix:
        device:
          # High-end Devices
          - name: 'Samsung Galaxy S23 Ultra'
            os_version: '13.0'
            category: 'high'
         # - name: 'Google Pixel 8 Pro'
         #   os_version: '14.0'
         #   category: 'high'

         # # Medium Devices
         # - name: 'Samsung Galaxy A52'
         #   os_version: '11.0'
         #   category: 'medium'
          
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn setup
      
      - name: BrowserStack Env Setup
        uses: browserstack/github-actions/setup-env@4478e16186f38e5be07721931642e65a028713c3
        with:
          username: ${{ env.BROWSERSTACK_USERNAME }}
          access-key: ${{ env.BROWSERSTACK_ACCESS_KEY }}
          build-name: ${{ github.repository }}-${{ github.ref_name }}-android-${{ matrix.device.name }}-${{ matrix.device.os_version }}-${{ github.run_number }}
          project-name: ${{ github.repository }}
      
      - name: Setup BrowserStack Local
        uses: browserstack/github-actions/setup-local@4478e16186f38e5be07721931642e65a028713c3
        with:
          local-testing: start
          local-identifier: ${{ github.run_id }}
          local-args: --force-local --verbose
      
      - name: Wait for BrowserStack Local
        run: |
          echo "Waiting for BrowserStack Local to be ready..."
          sleep 30
          echo "BrowserStack Local should be ready now"
      
      - name: Set Android Test Environment
        run: |
          echo "Setting test environment for device: ${{ matrix.device.name }}"
          echo "BROWSERSTACK_DEVICE=${{ matrix.device.name }}" >> $GITHUB_ENV
          echo "BROWSERSTACK_OS_VERSION=${{ matrix.device.os_version }}" >> $GITHUB_ENV
          echo "BROWSERSTACK_ANDROID_APP_URL=${{ needs.trigger-qa-builds-and-upload.outputs.browserstack-android-url }}" >> $GITHUB_ENV
          echo "TEST_PLATFORM=android" >> $GITHUB_ENV
          echo "TEST_SUITE=${{ github.event.inputs.test_suite }}" >> $GITHUB_ENV
          echo "QA_APP_VERSION=${{ needs.trigger-qa-builds-and-upload.outputs.android-version }}" >> $GITHUB_ENV
      
      - name: Run Android Tests on ${{ matrix.device.name }}
        env:
          BROWSERSTACK_LOCAL: true
          BROWSERSTACK_LOCAL_IDENTIFIER: ${{ github.run_id }}
        run: |
          echo "=== Testing ${{ matrix.device.name }} (${{ matrix.device.category }} Class) ==="
          echo "OS Version: ${{ matrix.device.os_version }}"
          echo "Category: ${{ matrix.device.category }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "QA App Version: ${{ needs.trigger-qa-builds-and-upload.outputs.android-version }}"
          echo "BrowserStack Android App URL: ${{ needs.trigger-qa-builds-and-upload.outputs.browserstack-android-url }}"
          
          yarn run-appwright:android-bs
      
      - name: Upload Android Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: android-test-results-${{ matrix.device.name }}-${{ matrix.device.os_version }}
          path: |
            appwright/test-reports/appwright-report/
            appwright/reporters/reports
          if-no-files-found: ignore
          retention-days: 7

  # Sequential iOS Tests on Multiple Devices
  ios-tests:
    name: iOS Tests
    runs-on: ubuntu-latest
    needs: trigger-qa-builds-and-upload
    strategy:
      fail-fast: false
      matrix:
        device:
          # High-end Devices
          - name: 'iPhone 14 Pro Max'
            os_version: '16.0'
            category: 'high'
          
          # # Medium Devices
          # - name: 'iPhone 12'
          #   os_version: '14.0'
          #   category: 'medium'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn setup
      
      - name: BrowserStack Env Setup
        uses: browserstack/github-actions/setup-env@4478e16186f38e5be07721931642e65a028713c3
        with:
          username: ${{ env.BROWSERSTACK_USERNAME }}
          access-key: ${{ env.BROWSERSTACK_ACCESS_KEY }}
          build-name: ${{ github.repository }}-${{ github.ref_name }}-ios-${{ matrix.device.name }}-${{ matrix.device.os_version }}-${{ github.run_number }}
          project-name: ${{ github.repository }}
      
      - name: Setup BrowserStack Local
        uses: browserstack/github-actions/setup-local@4478e16186f38e5be07721931642e65a028713c3
        with:
          local-testing: start
          local-identifier: ${{ github.run_id }}
          local-args: --force-local --verbose
      
      - name: Wait for BrowserStack Local
        run: |
          echo "Waiting for BrowserStack Local to be ready..."
          sleep 30
          echo "BrowserStack Local should be ready now"
      
      - name: Set iOS Test Environment
        run: |
          echo "Setting test environment for device: ${{ matrix.device.name }}"
          echo "BROWSERSTACK_DEVICE=${{ matrix.device.name }}" >> $GITHUB_ENV
          echo "BROWSERSTACK_OS_VERSION=${{ matrix.device.os_version }}" >> $GITHUB_ENV
          echo "BROWSERSTACK_IOS_APP_URL=${{ needs.trigger-qa-builds-and-upload.outputs.browserstack-ios-url }}" >> $GITHUB_ENV
          echo "TEST_SUITE=${{ github.event.inputs.test_suite }}" >> $GITHUB_ENV
          echo "QA_APP_VERSION=${{ needs.trigger-qa-builds-and-upload.outputs.ios-version }}" >> $GITHUB_ENV
      
      - name: Run iOS Tests on ${{ matrix.device.name }}
        env:
          BROWSERSTACK_LOCAL: true
          BROWSERSTACK_LOCAL_IDENTIFIER: ${{ github.run_id }}
        run: |
          echo "=== Testing ${{ matrix.device.name }} (${{ matrix.device.category }} Class) ==="
          echo "OS Version: ${{ matrix.device.os_version }}"
          echo "Category: ${{ matrix.device.category }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "QA App Version: ${{ needs.trigger-qa-builds-and-upload.outputs.ios-version }}"
          echo "BrowserStack iOS App URL: ${{ needs.trigger-qa-builds-and-upload.outputs.browserstack-ios-url }}"
          if [ "${{ matrix.device.os_version }}" == "13" ] || [ "${{ matrix.device.os_version }}" == "11" ]; then
            echo "Warning: iOS ${{ matrix.device.os_version }} may not be supported by MetaMask app"
          fi
          
          yarn run-appwright:ios-bs
      
      - name: Upload iOS Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ios-test-results-${{ matrix.device.name }}-${{ matrix.device.os_version }}
          path: |
            appwright/test-reports/appwright-report/
            appwright/reporters/reports
          if-no-files-found: ignore
          retention-days: 7

  # Results Gathering Job
  gather-results:
    name: Gather Test Results
    runs-on: ubuntu-latest
    needs: [trigger-qa-builds-and-upload, android-tests, ios-tests]
    if: always()
    
    steps:
      - name: Download All Test Results
        uses: actions/download-artifact@v4
        with:
          path: appwright/test-reports/
      
      - name: Upload Combined Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: combined-reports
          path: |
            appwright/test-reports/appwright-report/
            appwright/reporters/reports
          if-no-files-found: ignore
          retention-days: 14
    
      - name: Check Test Results
        run: |
          if [ "${{ needs.android-tests.result }}" == "failure" ] || [ "${{ needs.ios-tests.result }}" == "failure" ]; then
            echo "Some tests failed. Check the individual job results above."
            echo "Note: iOS 13 and iOS 11 failures are expected due to MetaMask app compatibility."
            exit 1
          else
            echo "All test jobs completed successfully!"
          fi
      
      - name: Display QA Build Info
        run: |
          echo "=== QA Build Information ==="
          echo "Android Version: ${{ needs.trigger-qa-builds-and-upload.outputs.android-version }}"
          echo "iOS Version: ${{ needs.trigger-qa-builds-and-upload.outputs.ios-version }}"
          echo ""
          echo "=== BrowserStack App URLs ==="
          echo "Android App URL: ${{ needs.trigger-qa-builds-and-upload.outputs.browserstack-android-url }}"
          echo "iOS App URL: ${{ needs.trigger-qa-builds-and-upload.outputs.browserstack-ios-url }}"