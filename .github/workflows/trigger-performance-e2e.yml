name: Performance E2E Tests - Android & iOS Separate Jobs

on:
  workflow_dispatch:
    inputs:
      info:
        description: 'This workflow runs performance tests on multiple devices with separate jobs for Android and iOS platforms'
        required: false
        type: string
      browserstack_app_url_android:
        description: 'BrowserStack Android App URL (bs://...)'
        required: true
        type: string
      browserstack_app_url_ios:
        description: 'BrowserStack iOS App URL (bs://...)'
        required: true
        type: string
      test_suite:
        description: 'Test suite to run (e.g., **/tests/*.spec.js for all tests)'
        required: false
        default: '**/tests/*.spec.js'
        type: string
        # Note: Currently not used in the workflow but kept for future implementation

permissions:
  contents: read
  id-token: write

env:
  BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
  BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
  MM_TEST_ACCOUNT_SRP: ${{ secrets.MM_TEST_ACCOUNT_SRP }}

jobs:
  # Generate Device Matrix
  generate-matrix:
    name: Generate Device Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.device-matrix.outputs.matrix }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate Device Matrix
        id: device-matrix
        run: |
          echo "Installing jq for JSON processing..."
          sudo apt-get update && sudo apt-get install -y jq
          
          echo "Reading device matrix from appwright/device-matrix.json..."
          
          # Check if file exists
          if [ ! -f "appwright/device-matrix.json" ]; then
            echo "Error: device-matrix.json not found!"
            exit 1
          fi
          
          # Read the device matrix JSON file
          DEVICE_MATRIX=$(cat appwright/device-matrix.json)
          
          # Validate JSON format
          if ! echo "$DEVICE_MATRIX" | jq . > /dev/null 2>&1; then
            echo "Error: Invalid JSON in device-matrix.json"
            exit 1
          fi
          
          # Generate device matrix using a simpler approach
          echo "Generating device matrix..."
          
          # Create the matrix using the working JQ command that concatenates arrays and maps platform
          MATRIX_JSON=$(jq -c '{ device: (.android_devices + .ios_devices | map({name: .name, os_version: .os_version, category: .category, platform: (if .os_version | test("^[0-9]+$") then "ios" else "android" end)})) }' appwright/device-matrix.json)
          
          # Validate the generated matrix
          if ! echo "$MATRIX_JSON" | jq . > /dev/null 2>&1; then
            echo "Error: Failed to generate valid matrix JSON"
            echo "Generated matrix: $MATRIX_JSON"
            exit 1
          fi
          
          # Output the matrix for GitHub Actions
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          
          echo "Device matrix generated successfully:"
          echo "$MATRIX_JSON" | jq -r '.device[] | "\(.platform): \(.name) (\(.category)) - \(.os_version)"'
          
          # Count devices for verification
          DEVICE_COUNT=$(echo "$MATRIX_JSON" | jq '.device | length')
          echo "Total devices: $DEVICE_COUNT"
          
          # Verify we have devices for both platforms
          ANDROID_COUNT=$(echo "$DEVICE_MATRIX" | jq '.android_devices | length')
          IOS_COUNT=$(echo "$DEVICE_MATRIX" | jq '.ios_devices | length')
          
          if [ "$ANDROID_COUNT" -eq 0 ] && [ "$IOS_COUNT" -eq 0 ]; then
            echo "Error: No devices found in matrix!"
            exit 1
          fi
          
          echo "Android devices: $ANDROID_COUNT"
          echo "iOS devices: $IOS_COUNT"

  # Run Tests on Android Devices
  run-android-tests:
    name: Run Tests on Android Devices
    runs-on: ubuntu-latest
    needs: [generate-matrix]
    strategy:
      fail-fast: false
      matrix:
        device: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn setup

      - name: BrowserStack Env Setup
        uses: browserstack/github-actions/setup-env@4478e16186f38e5be07721931642e65a028713c3
        with:
          username: ${{ env.BROWSERSTACK_USERNAME }}
          access-key: ${{ env.BROWSERSTACK_ACCESS_KEY }}
          build-name: ${{ github.repository }}-${{ github.ref_name }}-android-${{ matrix.device.name }}-${{ matrix.device.os_version }}-${{ github.run_number }}
          project-name: ${{ github.repository }}

      - name: Setup BrowserStack Local
        uses: browserstack/github-actions/setup-local@4478e16186f38e5be07721931642e65a028713c3
        with:
          local-testing: start
          local-identifier: ${{ github.run_id }}
          local-args: --force-local --verbose
      
      - name: Wait for BrowserStack Local
        run: |
          echo "Waiting for BrowserStack Local to be ready..."
          sleep 30
          echo "BrowserStack Local should be ready now"
      
      - name: Run Tests on ${{ matrix.device.name }}
        if: matrix.device.platform == 'android'
        env:
          BROWSERSTACK_LOCAL: true
          BROWSERSTACK_LOCAL_IDENTIFIER: ${{ github.run_id }}
          BROWSERSTACK_DEVICE: ${{ matrix.device.name }}
          BROWSERSTACK_OS_VERSION: ${{ matrix.device.os_version }}
          BROWSERSTACK_ANDROID_APP_URL: ${{ github.event.inputs.browserstack_app_url_android }}
          BROWSERSTACK_IOS_APP_URL: ${{ github.event.inputs.browserstack_app_url_ios }}
        run: |
          echo "=== Testing Android Device: ${{ matrix.device.name }} (${{ matrix.device.category }} Class) ==="
          echo "OS Version: ${{ matrix.device.os_version }}"
          echo "Category: ${{ matrix.device.category }}"
          echo "Branch: ${{ github.ref_name }}"
          
          yarn run-appwright:android-bs
      
      - name: Upload Test Results
        if: always() && matrix.device.platform == 'android'
        uses: actions/upload-artifact@v4
        with:
          name: android-test-results-${{ matrix.device.name }}-${{ matrix.device.os_version }}
          path: |
            test-reports/
            appwright-report/
          retention-days: 7

  # Run Tests on iOS Devices
  run-ios-tests:
    name: Run Tests on iOS Devices
    runs-on: ubuntu-latest
    needs: [generate-matrix]
    strategy:
      fail-fast: false
      matrix:
        device: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn setup

      - name: BrowserStack Env Setup
        uses: browserstack/github-actions/setup-env@4478e16186f38e5be07721931642e65a028713c3
        with:
          username: ${{ env.BROWSERSTACK_USERNAME }}
          access-key: ${{ env.BROWSERSTACK_ACCESS_KEY }}
          build-name: ${{ github.repository }}-${{ github.ref_name }}-ios-${{ matrix.device.name }}-${{ matrix.device.os_version }}-${{ github.run_number }}
          project-name: ${{ github.repository }}

      - name: Setup BrowserStack Local
        uses: browserstack/github-actions/setup-local@4478e16186f38e5be07721931642e65a028713c3
        with:
          local-testing: start
          local-identifier: ${{ github.run_id }}
          local-args: --force-local --verbose
      
      - name: Wait for BrowserStack Local
        run: |
          echo "Waiting for BrowserStack Local to be ready..."
          sleep 30
          echo "BrowserStack Local should be ready now"
      
      - name: Run Tests on ${{ matrix.device.name }}
        if: matrix.device.platform == 'ios'
        env:
          BROWSERSTACK_LOCAL: true
          BROWSERSTACK_LOCAL_IDENTIFIER: ${{ github.run_id }}
          BROWSERSTACK_DEVICE: ${{ matrix.device.name }}
          BROWSERSTACK_OS_VERSION: ${{ matrix.device.os_version }}
          BROWSERSTACK_ANDROID_APP_URL: ${{ github.event.inputs.browserstack_app_url_android }}
          BROWSERSTACK_IOS_APP_URL: ${{ github.event.inputs.browserstack_app_url_ios }}
        run: |
          echo "=== Testing iOS Device: ${{ matrix.device.name }} (${{ matrix.device.category }} Class) ==="
          echo "OS Version: ${{ matrix.device.os_version }}"
          echo "Category: ${{ matrix.device.category }}"
          echo "Branch: ${{ github.ref_name }}"
          
          if [ "${{ matrix.device.os_version }}" == "13" ] || [ "${{ matrix.device.os_version }}" == "11" ]; then
            echo "Warning: iOS ${{ matrix.device.os_version }} may not be supported by MetaMask app"
          fi
          
          yarn run-appwright:ios-bs
        
      - name: Upload Test Results
        if: always() && matrix.device.platform == 'ios'
        uses: actions/upload-artifact@v4
        with:
          name: ios-test-results-${{ matrix.device.name }}-${{ matrix.device.os_version }}
          path: |
            test-reports/
            appwright-report/
          retention-days: 7

  # Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [run-android-tests, run-ios-tests]
    if: always()
    
    steps:
      - name: Download Test Results
        uses: actions/download-artifact@v4
        with:
          path: test-results/
      
      - name: Generate Test Summary
        run: |
          echo "## Multi-Device Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Device Matrix" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Read the device matrix to generate dynamic summary
          if [ -f "appwright/device-matrix.json" ]; then
            DEVICE_MATRIX=$(cat appwright/device-matrix.json)
            
            # Android devices summary
            ANDROID_COUNT=$(echo "$DEVICE_MATRIX" | jq '.android_devices | length')
            echo "#### Android Devices ($ANDROID_COUNT total):" >> $GITHUB_STEP_SUMMARY
            echo "$DEVICE_MATRIX" | jq -r '.android_devices[] | "\(.category | ascii_upcase) Class: \(.name) - Android \(.os_version)"' | while read -r line; do
              echo "- **$line**" >> $GITHUB_STEP_SUMMARY
            done
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # iOS devices summary
            IOS_COUNT=$(echo "$DEVICE_MATRIX" | jq '.ios_devices | length')
            echo "#### iOS Devices ($IOS_COUNT total):" >> $GITHUB_STEP_SUMMARY
            echo "$DEVICE_MATRIX" | jq -r '.ios_devices[] | "\(.category | ascii_upcase) Class: \(.name) - iOS \(.os_version)"' | while read -r line; do
              if [[ "$line" == *"iOS 13"* ]] || [[ "$line" == *"iOS 11"* ]]; then
                echo "- **$line** - ⚠️ iOS version not supported by MetaMask" >> $GITHUB_STEP_SUMMARY
              else
                echo "- **$line**" >> $GITHUB_STEP_SUMMARY
              fi
            done
          else
            echo "⚠️ Device matrix file not found, using fallback summary" >> $GITHUB_STEP_SUMMARY
            echo "#### Android Devices (5 total):" >> $GITHUB_STEP_SUMMARY
            echo "1. **Samsung Galaxy S23 Ultra** (High Class) - Android 13" >> $GITHUB_STEP_SUMMARY
            echo "2. **Google Pixel 8 Pro** (High Class) - Android 14" >> $GITHUB_STEP_SUMMARY
            echo "3. **Samsung Galaxy A52s 5G** (Medium Class) - Android 12" >> $GITHUB_STEP_SUMMARY
            echo "4. **Samsung Galaxy A32** (Low Class) - Android 11" >> $GITHUB_STEP_SUMMARY
            echo "5. **TECNO KI5k** (Low Class) - Android 11" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### iOS Devices (3 total):" >> $GITHUB_STEP_SUMMARY
            echo "1. **iPhone 14 Pro Max** (High Class) - iOS 16" >> $GITHUB_STEP_SUMMARY
            echo "2. **iPhone 11** (Medium Class) - iOS 13 - ⚠️ iOS 13 not supported by MetaMask" >> $GITHUB_STEP_SUMMARY
            echo "3. **iPhone 8** (Low Class) - iOS 11 - ⚠️ iOS 11 not supported by MetaMask" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "Check the artifacts above for detailed test reports from all devices." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Important Notes" >> $GITHUB_STEP_SUMMARY
          echo "- Uses existing browserstack-android and browserstack-ios projects" >> $GITHUB_STEP_SUMMARY
          echo "- Device-specific settings controlled via environment variables" >> $GITHUB_STEP_SUMMARY
          echo "- iOS 13 and iOS 11 devices may fail due to MetaMask app compatibility" >> $GITHUB_STEP_SUMMARY
      
      - name: Check Test Results
        run: |
          echo "## Test Execution Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All test jobs completed successfully!"